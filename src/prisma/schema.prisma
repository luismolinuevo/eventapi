// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  user_id            Int                  @id @unique @default(autoincrement())
  email              String               @unique @db.VarChar(40)
  password           String               @db.VarChar(100)
  events             Events[]
  tokens             Token[]
  passwordResetToken PasswordResetToken[]
  phone              String?
}

model Events {
  event_id Int  @id @unique @default(autoincrement())
  user_id  Int
  user     User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
}

// Define the Token model
model Token {
  id     Int      @id @default(autoincrement())
  token  String   @unique
  type   String // Can be 'access' or 'refresh'
  expiry DateTime

  user_id Int
  user    User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
}

// Define the BlacklistedToken model if using blacklisting
model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  type      String
  createdAt DateTime @default(now())

  // Optional: add relation if you want to track which user the blacklisted token belongs to
  // userId   Int?
  // user     User?   @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id Int @id @default(autoincrement())

  token      String   @unique
  type       String
  createdAt  DateTime @default(now())
  expires_at DateTime
  user_id    Int
  user       User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id])
}
